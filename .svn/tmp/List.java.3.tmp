package commands;

import java.util.LinkedList;
import fileSystem.*;

public class List extends Command {

  /**
   * Execute the Ls command
   *
   * @param parameter
   */
  public String execute(String[] argument) {
    String path = ""; //Set an empty string for path
    String type = ""; //Set an empty string for the type (file or directory)
    String contents = ""; //Set an empty string for the contents (file or directory)
    File file = null; //Initialize file as null
    int argLen = argument.length; //Get the length of the command and its arguments
    if (argLen == 1) { //If no path is given
      try {
        //Then try printing the content of current directory
        contents += printContents(FileTree.getCurrent());
        if (contents.contentEquals("")) { //If the content is empty
          return ""; //Then return an empty string
        }
        //Otherwise, return all the contents without a line-break afterwards
        return contents.substring(0, contents.length() - 1);
      } catch (NullPointerException e) {
        return "Directory is not initialized";
      }
    } else {
      for(int i = 1; i < argLen; i++) {
        path = argument[i];
        file = FileTree.traverseToEnd(path);
        if(file == null) {
          contents += "The given path is invalid";
          return contents; 
        }
        else {
          type = (file instanceof Directory)? "Directory":"File";
          contents += path;
          if(type.equals("Directory")) {
            contents += ":\n";
            contents += printContents((Directory) file);
          }
            contents += "\n";
        }
      }

      return contents.substring(0, contents.length() - 1);
    }
  }

  /**
   * Print all the contents in a given directory or file
   *
   * @param path
   * @param currentDir
   * @return a string containing all the contents in a given directory or file
   */
  public static String printContents(Directory currentDir) {
     
    String result = "";
    // Get the number of contents in the current directory
    int numOfDirChildren = currentDir.getNumOfDirectoryChildren();
    int numOfFileChildren = currentDir.getNumOfFileChildren();
    // Get all the contents in the current directory
    LinkedList<Directory> dirChildren = currentDir.getDirectoryChildren();
    LinkedList<File> fileChildren = currentDir.getFileChildren();
    // Iterate through all the contents
    for (int i = 0; i < numOfDirChildren; i++) {
    // Append the name of each content to the string result
      result += dirChildren.get(i).getName();
      if(!(result.equals(""))){
        result += "\n";
        }
      }
    for(int i = 0; i < numOfFileChildren; i++) {
      result += fileChildren.get(i).getName();
      if(!(result.equals(""))){
        result += "\n";
        }
      }
    // Return the string containing all the contents
    return result;
    }

  @Override
  public String toString() {
    String info = "ls [PATH ...]\n\n" + "\tIf no paths are given, print the contents of the current"
        + " directory, with a new line following each of the content.\n" + "\tContents can be file"
        + " or directory.\n\n" + "\tOtherwise, for each path p, the order listed:\n\n"
        + "\tIf p specifies a file, print p.\n" + "\tIf p specifies a directory, print p, a colon"
            + ", then the contents of that directory, then an extra new line.\n"
        + "\tIf p does not exist, print a suitable error message.";
    return info;
  }
}
