package commands;

import fileSystem.*;

public class List extends Command{ // TODO: extends Command later
  
    protected static Directory root;
    protected static Directory current;

	/**
	 * Execute the Ls command
	 * 
	 * @param parameter
	 */
	public void execute(String[] parameter)
	{
		//need the StandardInput implemented first
		return;
	}
	
	/**
	 * Check whether a path leads to a directory or a file
	 * 
	 * @param path
	 * @return a string specifying whether the path is a directory or a file
	 */
	public String checkDirOrFile(String path) {
	  Object dirOrFile = traverseToEnd(path);
	  if(dirOrFile instanceof Directory) {
	    return "Directory";
	  }
	  else {
	    return "File";
	  }
	}
	
	
	/**
	 * Iteratively traverse the given path and return the directory or file
	 * 
	 * @param path
	 * @param root
	 * @param current
	 * @return the file or directory object
	 */
	public static File traverseToEnd(String path) {
	    String[] p = path.split("/");
	    Directory dir = (p[0].equals("")) ? root : current;
	    int i = (p[0].equals("")) ? 1 : 0;
	    for(; i < p.length; i++) {
	      Directory dirChild = dir.findSubDir(p[i]);
	      if(dirChild == null) {
	        if(i < p.length - 1) {
	          return null;
	        }
	        else {
	          File fileChild = dir.findFile(p[i]);
	          if(fileChild != null) {
	            return fileChild;
	          }
	          
	        }
	      }
	      else {
	        dir = dirChild;
	      }
	  }
      return dir;
	}
	
	/**
	 * Print all the contents in a given directory
	 */
	public void printContentsInDirectory() {
	  
	  //Assuming we already get to the directory
	  /*Directory dir; // = ....
	  int numOfChildren = dir.getNumOfDirectoryChildren();
	  for(int i = 0; i < numOfChildren; i++) {
	    // Need access to dirChildren
	    // Print each children
	  }*/
	  
	 
	}

  @Override
  public String toString() {
    // TODO Auto-generated method stub
    return null;
  }
}
