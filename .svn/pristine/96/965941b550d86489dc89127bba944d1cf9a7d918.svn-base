// **********************************************************
// Assignment2:
// Student1: Stephen Guo
// UTORID user_name: guostep2
// UT Student #: 1006313231
// Author: Stephen Guo
//
// Student2: Steven Hans Limantoro
// UTORID user_name: limantor
// UT Student #: 1005780861
// Author: Steven Hans Limantoro
//
// Student3: Vignesh Nanthakumar
// UTORID user_name: nantha33
// UT Student #: 1006278948
// Author: Vignesh Nanthakumar
//
// Student4: Krutik Shah
// UTORID user_name: shahkr10
// UT Student #: 10062135626
// Author: Krutik Shah
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package commands;

import java.util.LinkedList;
import fileSystem.*;

public class List extends Command {

  // Get the fileTree
  private static FileTree fileTree = FileTree.getFileTree();

  // Create a string for the path
  private static String path;

  // Create a string to indicate directory or file
  private static String type;

  // Create a string to contain all the contents in a directory
  private static String contents;

  // Create a file object
  private static File file;

  /**
   * Execute the Ls command
   *
   * @param argument
   * @return a string containing contents of the current directory if there are no paths given, or a
   *         string containing the path if the path specifies a file, or a string containing the
   *         path, colon, and contents of the directory if the path specifies a directory, or a
   *         string containing an error message if the path does not exist.
   */
  public String execute(String[] argument) {

    // Initialize empty strings
    path = "";
    type = "";
    contents = "";

    // Initialize empty file
    file = null;

    // Get the length of the command and its arguments
    int argLen = argument.length;

    // If no path is given
    if (argLen == 1) {

      // Then try printing the content of current directory
      printContents(fileTree.getCurrent());

      // If the content is empty
      if (contents.contentEquals("")) {
        return "";
      }

      // Otherwise, return all the contents without a new line afterwards
      return contents.substring(0, contents.length() - 1);

      // If at least one path is given
    } else {
      contents = executePath(argLen, argument);
    }

    // Return all the contents without a new line afterwards
    return contents.substring(0, contents.length() - 1);
  }

  /**
   * Contain all the contents in a given directory
   *
   * @param currentDir
   */
  public static void printContents(Directory currentDir) {

    // Get the number of contents (directories and files) in the current directory
    int numOfDirChildren = currentDir.getNumOfDirectoryChildren();
    int numOfFileChildren = currentDir.getNumOfFileChildren();

    // Get all the contents (directories and files) in the current directory
    LinkedList<Directory> dirChildren = currentDir.getDirectoryChildren();
    LinkedList<File> fileChildren = currentDir.getFileChildren();

    // Iterate through all the directory contents
    for (int i = 0; i < numOfDirChildren; i++) {

      // Append the name of each directory to the string result
      contents += dirChildren.get(i).getName();

      // Add new lines for formatting
      if (!(contents.equals(""))) {
        contents += "\n";
      }
    }

    // Iterate through all the file contents
    for (int i = 0; i < numOfFileChildren; i++) {

      // Append the name of each file to the string result
      contents += fileChildren.get(i).getName();

      // Add new lines for formatting
      if (!(contents.equals(""))) {
        contents += "\n";
      }
    }

  }

  /**
   * Iterate through all the paths to collect all the contents of the given directories
   * 
   * @param argLen
   * @param argument
   * @return a string containing all the contents of all the given directories
   */
  public static String executePath(int argLen, String[] argument) {

    // Iterate through all the paths
    for (int i = 1; i < argLen; i++) {

      // Get one path
      path = argument[i];

      // Traverse the path until the end
      file = fileTree.traverseToEnd(path);

      // If the path does not exist
      if (file == null) {

        // Then return a suitable error message, and terminate the command (early return)
        contents += "The given path " + path + " is invalid\n";
        return contents;

      } else {
        // Check whether the path leads to a directory or a file
        type = (file instanceof Directory) ? "Directory" : "File";

        // Append the path for formatting
        contents += path;

        // If the path leads to a directory
        if (type.equals("Directory")) {

          // Append colon and contents of directory
          contents += ":\n";
          printContents((Directory) file);
        }

        // Append a line-break to separate the current with the next contents
        contents += "\n";
      }
    }

    return contents;
  }

  @Override
  public String toString() {
    // Create man page for ls command
    String info = "ls [PATH ...]\n\n" + "\tIf no paths are given, print the contents of the current"
        + " directory, with a new line following each of the content.\n" + "\tContents can be file"
        + " or directory.\n\n" + "\tOtherwise, for each path p, the order listed:\n\n"
        + "\tIf p specifies a file, print p.\n" + "\tIf p specifies a directory, print p, a colon"
        + ", then the contents of that directory, then an extra new line.\n"
        + "\tIf p does not exist, print a suitable error message.";
    return info;
  }
}
