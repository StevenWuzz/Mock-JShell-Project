// **********************************************************
// Assignment2:
// Student1: Stephen Guo
// UTORID user_name: guostep2
// UT Student #: 1006313231
// Author: Stephen Guo
//
// Student2: Steven Hans Limantoro
// UTORID user_name: limantor
// UT Student #: 1005780861
// Author: Steven Hans Limantoro
//
// Student3: Vignesh Nanthakumar
// UTORID user_name: nantha33
// UT Student #: 1006278948
// Author: Vignesh Nanthakumar
//
// Student4: Krutik Shah
// UTORID user_name: shahkr10
// UT Student #: 10062135626
// Author: Krutik Shah
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package commands;

import fileSystem.File;
import fileSystem.MakeFile;
import inputOutput.StandardOutput;

import java.util.Arrays;
import java.util.HashMap;

public abstract class Command {

  private static final HashMap<String, String> syntaxToCommand = new HashMap<>();
  private static boolean innit = false;

  /**
   * executes the main function of the command
   *
   * @param args
   * @return output of the command
   */
  protected abstract String execute(String[] args);

  private static void innit() {//initializing the hashmap
    syntaxToCommand.put("ls", "List");
    syntaxToCommand.put("history", "History");
    syntaxToCommand.put("exit", "Exit");
    syntaxToCommand.put("mkdir", "MakeDirectory");
    syntaxToCommand.put("popd", "PopDirectory");
    syntaxToCommand.put("pushd", "PushDirectory");
    syntaxToCommand.put("pwd", "PrintWorkingDirectory");
    syntaxToCommand.put("cat", "Concatenate");
    syntaxToCommand.put("man", "Manual");
    syntaxToCommand.put("cd", "ChangeDirectory");
    syntaxToCommand.put("echo", "Echo");
    innit = true;
  }

  /**
   * Using the toString to provide documentation of the command
   *
   * @return command documentation
   */
  public abstract String toString();

  /**
   * turns given syntax into a corrosponding command class, null if syntax is wrong
   * @param syntax
   * @return command
   */
  public static Command getCommand(String syntax) {
    Class cmd;
    
    try {
      cmd = Class.forName("commands." + syntaxToCommand.get(syntax));
      return (Command) cmd.getDeclaredConstructor().newInstance();
      
    } catch (Exception e) {
      e.printStackTrace();
      return null;
    }
    
  }

  /**
   * handles the redirection and filecreation for redirectio
   * @param msg
   * @param filePath
   * @param append
   */
  private static void redirect(String msg, String filePath, boolean append) {
    
    File file = MakeFile.makeFile(filePath);//making or getthing the file
    
    if (file == null) {//if file coulnd be made
      StandardOutput.perror(filePath + " is an invalid file path");
      return;
    }
    
    StandardOutput.output(msg, file, append);
  }

  /**
   * runs command and outputs it where disired
   * @param args
   */
  public static void runCommand(String[] args) {
    
    boolean redirect = false, append = false;
    
    String file="";
    
    if (!innit) {
      innit(); //if hash map not initialized, initialize it
    }
    
    try {//in case of emergency
      Command command = getCommand(args[0]);//det the command itself
      
      if (args[0].equals("echo") && args.length >= 3) { //check for redirect
        
        if (args[args.length - 2].contains(">")) {
          redirect = true;
          file=args[args.length-1];
          append=args[args.length-2].equals(">>");
          args = Arrays.copyOfRange(args, 0, args.length - 2);
        }
        
      }
      
      String msg = command.execute(args);// run command with given arguments
      
      if (redirect) {//if need to redirect call redirect
        redirect(msg, file, append);
      } else if (!msg.equals("")) {//else if non empty output it
        StandardOutput.output(msg);
      }
      
    } catch (Exception e) {//catching exceptions
      //e.printStackTrace(); //for ease of debugging
      StandardOutput.perror("Unknown Error has occurred"); //in case something unexpected happens
    }
    
  }
  
}
