// **********************************************************
// Assignment2:
// Student1: Stephen Guo
// UTORID user_name: guostep2
// UT Student #: 1006313231
// Author: Stephen Guo
//
// Student2: Steven Hans Limantoro
// UTORID user_name: limantor
// UT Student #: 1005780861
// Author: Steven Hans Limantoro
//
// Student3: Vignesh Nanthakumar
// UTORID user_name: nantha33
// UT Student #: 1006278948
// Author: Vignesh Nanthakumar
//
// Student4: Krutik Shah
// UTORID user_name: shahkr10
// UT Student #: 10062135626
// Author: Krutik Shah
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package commands;

public class Manual extends Command {

  /**
   * Checks if an argument is a name of a command
   * 
   * @param an argument for a command
   * @return true if the argument is a valid command. Return false otherwise
   */
  private static boolean isCommand(String argument) {
    String commands[] =
        {"exit", "mkdir", "cd", "ls", "pwd", "pushd", "popd", "history", "cat", "echo", "man"};
    for (int i = 0; i < commands.length; i++) {
      if (argument.contentEquals(commands[i])) {
        return true;
      }
    }
    return false;
  }
  
  @Override
  protected String execute(String[] args) {
    
    Command cmd;
    String output = "";

    if (args.length == 2) {//if only 1 givven command

      if (isCommand(args[1])) { // check if its a command
        cmd = Command.getCommand(args[1]);// get command object
        return cmd.toString();//return the documentation for tat object
      }

      return "Invalid Command";//else return  error
    }
    
    for (int i = 1; i < args.length; i++) {
      
      if (!isCommand(args[i])) {
        output += args[i] + "is an invalid Command";
        return output;
      }

      cmd = Command.getCommand(args[i]);//get command object

      output += args[i] + ":\n";//add name of command
      output += cmd.toString() + "\n";//add itsdocumentation

    }
    
    if (output.equals("")) {//if output is empty dont modify output
      return output;
    }
    
    return output.substring(0, output.length() - 1);//if output isnt empty remove trailing newline
  }

  /**
   * documentation of man
   * @return
   */
  @Override
  public String toString() {
    return "man CMD [CMD2 ...]\n\n\tPrint documentation for CMD (s)";
  }
}
