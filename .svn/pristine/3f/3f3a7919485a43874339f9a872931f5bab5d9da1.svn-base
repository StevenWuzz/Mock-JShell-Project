package commands;

import java.util.LinkedList;
import fileSystem.*;

public class List extends Command{

	/**
	 * Execute the Ls command
	 * 
	 * @param parameter
	 */
	public String execute(String[] argument)
	{
	    // Extract the given path
	    String path = "";
	    int argLen = argument.length;
	    if (argLen == 1) {
	      try {
	        path = FileTree.getCurrent().getName();
	      }
	      catch(NullPointerException e) {
	        return "Directory is not initialized";
	      }
	    }
	    else if(argLen == 2) {
	      path = argument[1];
	    }
	    // Check whether the path leads to directory or file
		String type = checkDirOrFile(path);
		return printContents(path, (Directory) FileTree.traverseToEnd(path), type);
	}
	
	/**
	 * Check whether a path leads to a directory or a file
	 * 
	 * @param path
	 * @return a string containing either "Directory" or "File"
	 */
	public static String checkDirOrFile(String path) {
	  
	  // Take the last destination
	  Object dirOrFile = FileTree.traverseToEnd(path);
	  // If it is a directory
	  if(dirOrFile instanceof Directory) {
	    return "Directory";
	  }
	  // If it is not a directory
	  else { 
	    return "File";
	  }
	}
	
	
	/**
	 * Print all the contents in a given directory or file
	 * @param path
	 * @param currentDir
	 * @return a string containing all the contents in a given directory or file
	 */
	public static String printContents(String path, Directory currentDir, String type) {
	  // Initialize an empty string called result
	  String result = "";
	  // Append the path into result (for formatting)
	  result += path;
	  if(type == "Directory") {
    	  // Append a colon into result (for formatting)
    	  result += ": ";
    	  // Get the number of contents in the current directory
    	  int numOfChildren = currentDir.getNumOfDirectoryChildren();
    	  // Get all the contents in the current directory
    	  LinkedList<Directory> dirChildren = currentDir.getDirectoryChildren();
    	  // Iterate through all the contents
    	  for(int i = 0; i < numOfChildren; i++) {
    	    // Append the name of each content to the string result
    	    result += dirChildren.get(i).getName();
    	    result += " ";
    	    }
	    }
	  // Return the string containing all the contents
	  return result;
	  }

  @Override
  public String toString() {
    // TODO Auto-generated method stub
    return null;
  }
}
