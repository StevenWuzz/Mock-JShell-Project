package fileSystem;

import java.util.LinkedList;

public class Directory extends File {

  private int numOfDirectories = 0;
  private int numOfFiles = 0;

  LinkedList<Directory> dirChildren = new LinkedList<Directory>();
  LinkedList<File> fileChildren = new LinkedList<File>();

  public Directory(Directory p, String n) {
    super(p, n);
    numOfDirectories = 0;
    numOfFiles = 0;
  }

  public Directory(int numD, int numF, Directory p, String n) {
    super(p, n);
    numOfDirectories = numD;
    numOfFiles = numF;
  }

  /**
   * Creates a child directory with specified parent and name then returns created directory.
   * 
   * @return number of directory children for current directory
   */
  public int getNumOfDirectoryChildren() {
    return this.numOfDirectories;
  }

  /**
   * Creates a child directory with specified parent and name then returns created directory.
   * 
   * @param number of directory children for current directory
   */
  public void setNumOfDirectoryChildren(int num) {
    numOfDirectories = num;
  }

  /**
   * Creates a child directory with specified parent and name then returns created directory.
   * 
   * @return number of file children for current directory
   */
  public int getNumOfFileChildren() {
    return this.numOfFiles;
  }

  /**
   * Creates a child directory with specified parent and name then returns created directory.
   * 
   * @param number of file children for current directory
   */
  public void setNumOfFileChildren(int num) {
    numOfFiles = num;
  }

  /**
   * Creates a child directory with specified parent and name then returns created directory.
   * 
   * @param child directory for current directory
   */
  public void addDirectoryChild(Directory c) {
    dirChildren.add(c);
    numOfDirectories += 1;
  }

  /**
   * Creates a child directory with specified parent and name then returns created directory.
   * 
   * @param child file for current directory
   */
  public void addFileChild(File c) {
    fileChildren.add(c);
    numOfFiles += 1;
  }

  public File findFile(String name) {

    // iterate over linked list
    for (int i = 0; i < numOfFiles; i++) {
      
      // compare if file is found
      if (name == fileChildren.get(i).getName()) {
        return fileChildren.get(i);
      }
      
    }
    // file not found
    return null;
  }
  
  public Directory findSubDir(String name) {

    // iterate over linked list
    for (int i = 0; i < numOfDirectories; i++) {
      
      // compare if directory is found
      if (name == dirChildren.get(i).getName()) {
        return dirChildren.get(i);
      }
      
    }
    // directory not found
    return null;
  }


}
