// **********************************************************
// Assignment2:
// Student1: Stephen Guo
// UTORID user_name: guostep2
// UT Student #: 1006313231
// Author: Stephen Guo
//
// Student2: Steven Hans Limantoro
// UTORID user_name: limantor
// UT Student #: 1005780861
// Author: Steven Hans Limantoro
//
// Student3: Vignesh Nanthakumar
// UTORID user_name: nantha33
// UT Student #: 1006278948
// Author: Vignesh Nanthakumar
//
// Student4: Krutik Shah
// UTORID user_name: shahkr10
// UT Student #: 10062135626
// Author: Krutik Shah
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package inputOutput;

/**
 * This class has all of the methods that checks if an input from JShell is valid
 */
public class Error {

  /**
   * Checks if a string has any of the illegal characters for file or directory names
   * 
   * @param an argument for a command
   * @return true if the argument has no illegal characters. Return false otherwise
   */
  private static boolean checkIllegalCharacters(String argument) {
    String illegalCharacters = "!@#$%^&*(){}~|<>?";

    for (int i = 0; i < illegalCharacters.length(); i++) {
      if (argument.indexOf(illegalCharacters.charAt(i)) != -1) {
        return false;
      }
    }
    return true;
  }

  /**
   * Checks if a string could be a potential path in a filesystem
   * 
   * @param an argument for a command
   * @return true if the string could be a potential path in a filesystem. Return false otherwise
   */
  public static boolean isValidPath(String path) {
    String splitPath[] = path.split("/");

    // Checks if '//' is in the string
    if (path.indexOf("//") != -1) {
      return false;
    }

    for (int i = 0; i < splitPath.length; i++) {
      // Checks if path has either '..' or '.'
      if (splitPath[i].indexOf(".") != -1 && !splitPath[i].contentEquals(".")
          && !splitPath[i].contentEquals("..")) {
        return false;
      }

      // Checks if there's any illegal characters
      if (!checkIllegalCharacters(splitPath[i])) {
        return false;
      }
    }
    return true;
  }

  /**
   * Checks if an argument is a non-negative integer
   * 
   * @param an argument for a command
   * @return true if the argument is a non-negative integer. Return false otherwise
   */
  private static boolean isValidInteger(String argument) {
    try {
      Integer.parseInt(argument);
    } catch (Exception e) {
      return false;
    }
    // Check if integer is non-negative
    return Integer.parseInt(argument) >= 0;
  }

  /**
   * Checks if an argument is a valid string for the JShell
   * 
   * @param an argument for a command
   * @return true if the argument is surrounded by double quotes, but contains no double quotes
   *         inside. Return false otherwise
   */
  private static boolean isValidString(String argument) {
    // Checks if string starts and ends with double quotes
    if (!(argument.charAt(0) == '"' && argument.charAt(argument.length() - 1) == '"')) {
      return false;
    }

    // Checks if string is just '"'
    if (argument.length() == 1) {
      return false;
    }

    // Checks if string has double quotes in it
    argument = argument.substring(1, argument.length() - 1);
    if (argument.indexOf('"') != -1) {
      return false;
    }
    return true;
  }

  /**
   * This method will check if an input for the echo command is valid
   * 
   * @param arguments for echo
   * @return true if it's a valid input for echo. Return false otherwise.
   */
  private static boolean checkEcho(String[] arguments) {
    String fullString = "";
    int argumentLength = arguments.length + 1;

    if (arguments.length == 1) {
      StandardOutput.perror("Error: Not enough arguments");
      return false;
    }

    // Gets full string from arguments
    for (int i = 1; i < arguments.length; i++) {
      fullString += arguments[i] + " ";
      argumentLength--;
      if (fullString.length() > 2 && fullString.charAt(fullString.length() - 2) == '"') {
        break;
      }
    }
    fullString = fullString.substring(0, fullString.length() - 1);

    // Checks if the string is valid
    if (!isValidString(fullString)) {
      StandardOutput.perror("Error: 1st argument is not a valid string");
      return false;
    }
    // If user doesn't want to write to a file
    if (argumentLength == 2) {
      return true;
    }

    // If user wants to write to a file
    if (argumentLength == 4) {
      if (!(arguments[arguments.length - 2].contentEquals(">")
          || arguments[arguments.length - 2].contentEquals(">>"))) {
        StandardOutput.perror("Error: 2nd argument must be '>' or '>>'");
        return false;
      }
      if (!isValidPath(arguments[arguments.length - 1])) {
        StandardOutput.perror("Error: Illegal characters in filename/path");
        return false;
      }
      return true;
    }
    StandardOutput.perror("Error: Too many arguments");
    return false;
  }

  // Junk //////////////////////////////////////////////////////////////////////////////////////////
  private static boolean checkRedirection(String[] arguments) {
    String fullArgument = "";
    String path = "";
    for (int i = 0; i < arguments.length; i++) {
      fullArgument += arguments[i] + " ";
    }
    // System.out.println(fullArgument);

    if (fullArgument.lastIndexOf(">") != -1 || fullArgument.lastIndexOf(">>") != -1) {
      path = fullArgument.substring(fullArgument.lastIndexOf(">") + 1, fullArgument.length());
      // path = path.replaceAll("\\s+", "");
      StandardOutput.perror(path);
      return (isValidPath(path));
    }

    // System.out.println("is valid redirection!");
    return true;
  }
  // Junk //////////////////////////////////////////////////////////////////////////////////////////

  /**
   * This method checks if an input for a command that takes in no parameters is valid
   * 
   * @param arguments for the command
   * @return true if it's a valid input for a no-parameter command. Return false otherwise.
   */
  private static boolean checkNoArgumentCommand(String[] arguments) {
    if (arguments.length == 1) {
      return true;
    }
    StandardOutput.perror("Error: Too many arguments");
    return false;
  }

  /**
   * This method checks if an input for a command that takes in one path is valid
   * 
   * @param arguments for the command
   * @return true if it's a valid input for a one path command. Return false otherwise.
   */
  private static boolean checkOnePathCommand(String[] arguments) {
    if (arguments.length == 1) {
      StandardOutput.perror("Error: Not enough arguments");
      return false;
    }
    if (arguments.length == 2 && isValidPath(arguments[1])) {
      return true;
    }
    if (arguments.length == 2 && !isValidPath(arguments[1])) {
      StandardOutput.perror("Error: Illegal characters in path");
      return false;
    }
    StandardOutput.perror("Error: Too many arguments");
    return false;
  }

  /**
   * This method checks if an input for a command that takes in more than one argument is valid
   * 
   * @param arguments for the command
   * @return true if it's a valid input for a more-than-one-argument command. Return false
   *         otherwise.
   */
  private static boolean checkAtLeastOneParameter(String[] arguments) {
    if (arguments.length == 1) {
      StandardOutput.perror("Error: Not enough arguments");
      return false;
    }
    return true;
  }

  /**
   * This method will check if an input for the history command is valid
   * 
   * @param arguments for history
   * @return true if it's a valid input for history. Return false otherwise.
   */
  private static boolean checkHistory(String[] arguments) {
    if (arguments.length == 1) {
      return true;
    }
    if (arguments.length == 2 && isValidInteger(arguments[1])) {
      return true;
    }
    if (arguments.length == 2 && !isValidInteger(arguments[1])) {
      StandardOutput.perror("Error: Not a valid integer provided");
      return false;
    }
    StandardOutput.perror("Error: Too many arguments");
    return false;
  }

  /**
   * This method will check if an input for the mkdir command is valid
   * 
   * @param arguments for mkdir
   * @return true if it's a valid input for mkdir. Return false otherwise.
   */
  private static boolean checkMakeDirectory(String[] arguments) {
    if (arguments.length <= 2) {
      StandardOutput.perror("Error: Not enough arguments");
      return false;
    }
    if (arguments.length == 3) {
      return true;
    }
    StandardOutput.perror("Error: Too many arguments");
    return false;
  }

  /**
   * Checks if an array of strings is a valid input for JShell
   * 
   * @param array of commands and arguments
   * @return true if the input is a valid input for JShell. Return false otherwise
   */
  public static boolean checkSyntax(String[] arguments) {
    switch (arguments[0]) {
      case ("exit"):
        return checkNoArgumentCommand(arguments);
      case ("mkdir"):
        return checkMakeDirectory(arguments);
      case ("cd"):
        return checkOnePathCommand(arguments);
      case ("ls"):
        return true;
      case ("pwd"):
        return checkNoArgumentCommand(arguments);
      case ("pushd"):
        return checkOnePathCommand(arguments);
      case ("popd"):
        return checkNoArgumentCommand(arguments);
      case ("history"):
        return checkHistory(arguments);
      case ("cat"):
        return checkAtLeastOneParameter(arguments);
      case ("echo"):
        return checkEcho(arguments);
      case ("man"):
        return checkAtLeastOneParameter(arguments);
      case (""):
        return false;
    }

    StandardOutput.perror("Error: Not a valid command");
    return false;
  }
}
