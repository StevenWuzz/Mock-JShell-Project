package inputOutput;

public class Error {
  private static boolean checkIllegalCharacters(String argument) {
    String illegalCharacters = "!@#$%^&*(){}~|<>?"; // Removed '/' and "."

    for (int i = 0; i < illegalCharacters.length(); i++) {
      if (argument.indexOf(illegalCharacters.charAt(i)) != -1) {
        return false;
      }
    }
    return true;
  }
  
  public static boolean isValidPath(String path) {
    String splitPath[] = path.split("/");
    
    for (int i = 0; i < splitPath.length; i++) {
      // Checks if path has either '..' or '.'
      if (splitPath[i].indexOf(".") != -1 && !splitPath[i].contentEquals(".") && !splitPath[i].contentEquals("..")) {
        //System.out.println("Error: No dots in directory or filenames");
        return false;
      }
      if(!checkIllegalCharacters(splitPath[i])) {
        //System.out.println("Error: Illegal characters!");
        return false;
      }
    }
    return true;
  }

  private static boolean isValidInteger(String argument) {
    try {
      Integer.parseInt(argument);
    } catch (Exception e) {
      return false;
    }
    // Check if integer is non-negative
    return Integer.parseInt(argument) >= 0;
  }

  private static boolean isValidString(String argument) {
    // Checks if string starts and ends with double quotes
    if (!(argument.charAt(0) == '"' && argument.charAt(argument.length() - 1) == '"')) {
      return false;
    }
    // Checks if string has double quotes in it
    argument = argument.substring(1, argument.length() - 1);
    if (argument.indexOf('"') != -1) {
      return false;
    }
    return true;
  }

  public static boolean isCommand(String argument) {
    String commands[] =
        {"exit", "mkdir", "cd", "ls", "pwd", "pushd", "popd", "history", "cat", "echo", "man"};
    for (int i = 0; i < commands.length; i++) {
      if (argument.contentEquals(commands[i])) {
        return true;
      }
    }
    return false;
  }

  public static boolean checkSyntax(String[] arguments) {
    switch (arguments[0]) {
      case ("exit"): // Can combine with popd
        if (arguments.length == 1) {
          return true;
        }
        System.out.println("Error: Too many arguments");
        return false;


      case ("mkdir"):
        if (arguments.length <= 2) {
          System.out.println("Error: Not enough arguments");
          return false;
        }
        if (arguments.length == 3) {
          return true;
        }
        System.out.println("Error: Too many arguments");
        return false;


      case ("cd"):
        if (arguments.length == 1) {
          System.out.println("Error: Not enough arguments");
          return false;
        }
        if (arguments.length == 2 && isValidPath(arguments[1])) {
          return true;
        }
        if (arguments.length == 2 && !isValidPath(arguments[1])) {
          System.out.println("Error: Illegal characters in path");
          return false;
        }
        System.out.println("Error: Too many arguments");
        return false;


      case ("ls"):
        return true;


      case ("pwd"):
        if (arguments.length == 1) {
          return true;
        }
        System.out.println("Error: Too many arguments");
        return false;


      case ("pushd"):
        if (arguments.length == 1) {
          System.out.println("Error: Not enough arguments");
          return false;
        }
        if (arguments.length == 2 && isValidPath(arguments[1])) {
          return true;
        }
        if (arguments.length == 2 && !isValidPath(arguments[1])) {
          System.out.println("Error: Illegal characters in filename/path");
          return false;
        }
        System.out.println("Error: Too many arguments");
        return false;


      case ("popd"):
        if (arguments.length == 1) {
          return true;
        }
        System.out.println("Error: Too many arguments");
        return false;


      case ("history"):
        if (arguments.length == 1) {
          return true;
        }
        if (arguments.length == 2 && isValidInteger(arguments[1])) {
          return true;
        }
        if (arguments.length == 2 && !isValidInteger(arguments[1])) {
          System.out.println("Error: Not a valid integer provided");
          return false;
        }
        System.out.println("Error: Too many arguments");
        return false;


      case ("cat"):
        if (arguments.length == 1) {
          System.out.println("Error: Not enough arguments");
          return false;
        }
        return true;


      case ("echo"):
        if (arguments.length == 1 || arguments.length == 3) {
          System.out.println("Error: Not enough arguments");
          return false;
        }
        if (!isValidString(arguments[1])) {
          System.out.println("Error: 1st argument is not a valid string");
          return false;
        }
        if (arguments.length == 2) {
          return true;
        }
        if (arguments.length == 4) {
          if (!(arguments[2].contentEquals(">") || arguments[2].contentEquals(">>"))) {
            System.out.println("Error: 2nd argument must be '>' or '>>'");
            return false;
          }
          if (!isValidPath(arguments[1])) {
            System.out.println("Error: Illegal characters in filename/path");
            return false;
          }
          return true;
        }
        System.out.println("Error: Too many arguments");
        return false;


      case ("man"):
        if (arguments.length == 1) {
          System.out.println("Error: Not enough arguments");
          return false;
        }
        return true;


      case (""):
        return false;
    }

    System.out.println("Error: Not a valid command");
    return false;
  }
}
