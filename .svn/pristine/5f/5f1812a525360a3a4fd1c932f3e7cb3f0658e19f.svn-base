package commands;

import fileSystem.Directory;
import fileSystem.File;
import fileSystem.FileTree;
import inputOutput.Error;
import inputOutput.StandardOutput;
import java.util.Arrays;
import java.util.Iterator;

/** This class has all of the methods needed to run Search */
public class Search extends Command {


  private String searchFile(Directory dir, String name) {
    File f;
    Iterator<File> fileChildren = dir.getFileChildren();
    while (fileChildren.hasNext()) {
      f = fileChildren.next();
      if (f.getName().equals(name)) {
        return PrintWorkingDirectory.printFullPath(f.getParent()) + f.getName();
      }
    }
    return "";
  }

  private String searchDir(Directory dir, String name) {
    Directory f;
    Iterator<Directory> dirChildren = dir.getDirectoryChildren();
    while (dirChildren.hasNext()) {
      f = dirChildren.next();
      if (f.getName().equals(name)) {
        return PrintWorkingDirectory.printFullPath(f);
      }
    }
    return "";
  }

  private String search(Directory dir, String name, boolean file) {
    String output;
    if (file) {
      output = searchFile(dir, name);
    } else {
      output = searchDir(dir, name);
    }
    Directory f;
    String temp;
    Iterator<Directory> dirChildren = dir.getDirectoryChildren();
    while (dirChildren.hasNext()) {
      f = dirChildren.next();
      temp = search(f, name, file);
      if (!temp.equals("")) {
        output += "\n" + temp;
      }
    }
    return output;
  }


  @Override
  /**
   * Execute the search command
   * 
   * @param a string array of arguments for the search command
   * @return a string containing the output of search command
   */
  public String execute(String[] args, FileTree fileTree) {

    boolean file = args[args.length - 3].equals("f");

    String name = args[args.length - 1];
    name = name.substring(1, name.length() - 1);
    String output = "";
    Directory dir;
    args = Arrays.copyOfRange(args, 1, args.length - 4);
    for (String path : args) {
      if (!Error.isValidPath(path)) {
        StandardOutput.perror(path + " is not a valid path");
        return output;
      }
      dir = (Directory) fileTree.traverseToEnd(path);
      if (dir == null) {
        StandardOutput.perror(path + " is not a directory");
        return output;
      }
      output += path + ":\n" + search(dir, name, file) + "\n\n";
    }

    if (output.equals("")) {
      return output;
    }
    return output.substring(0, output.length() - 2);
  }

  @Override
  /**
   * returns the manual entry for search
   * 
   * @return manual entry for search
   */
  public String toString() {
    
    // create man page for tree command
    String info = "tree\n\n"
        + "\tStarting from the root directory (‘\\’) display the entire file system as a tree.\n"
        + "\tEvery level of the tree is indented by a tab character.\n";
    
    
    return info;
  }
}
