package commands;

import java.util.Iterator;
import java.util.LinkedList;
import fileSystem.*;

/** This class has all of the methods needed to run Remove */
public class Remove extends Command {

  /**
   * Deletes a directory from the file system and recursively deletes it's contents
   * 
   * @param the directory to be deleted
   */
  public static void deleteDir(Directory currentDir) {

    // base case
    if (currentDir == null) {
      return;
    }

    // get all the directory children in the current directory
    Iterator<Directory> dirChildren = currentDir.getDirectoryChildren();

    // traverse through directory children and delete them recursively
    while (dirChildren.hasNext()) {
      deleteDir(dirChildren.next());
    }

    // get all the file children in the current directory
    Iterator<File> fileChildren = currentDir.getFileChildren();

    // delete all file children
    while(fileChildren.hasNext()) {
      currentDir.deleteFileChild(fileChildren.next());
      System.gc();
    }

    // delete current dir
    currentDir.getParent().deleteDirectoryChild(currentDir);
    System.gc();
    
  }

  @Override
  /**
   * Execute the rm command
   * 
   * @param a string array of arguments for the rm command
   * @return a string containing the output of rm command
   */
  public String execute(String[] args) {

    FileTree fileTree = FileTree.getFileTree();

    Directory removeDir;

    // get current directory as parent for dir
    if (args[1].lastIndexOf("/") == -1) {
      removeDir = fileTree.getCurrent();

      // get parent of current directory as parent for dir
    } else if (args[1].lastIndexOf("/") == 0) {
      removeDir = fileTree.getRoot();

      // traverse to start of path and get parent for dir
    } else {
      removeDir =
          (Directory) fileTree.traverseToEnd(args[1].substring(0, args[1].lastIndexOf("/")));

      // path cannot be traversed
      if (removeDir == null) {
        return "Invalid Path";
      }
    }
    
    // get path of current directory
    String currentPath = fileTree.getCurrent().getPath();
    
    // get path of directory to remove
    String removePath = removeDir.getPath();
    
    // directory to remove is in current directory path
    if(currentPath.contains(removePath)) {
      return "Cannot remove directory in current path";
    }
    
    System.out.println(removeDir.getName());
    
    // delete directory and its contents
    deleteDir(removeDir);
    
    // delete unused memory
    System.gc();

    return "";
  }

  @Override
  /**
   * returns the manual entry for rm
   * 
   * @return manual entry for rm
   */
  public String toString() {

    // create man page for rm command
    String info = "rm DIR\n\n"
        + "\tRemoves the DIR from the file system. This also recursively removes all the\n"
        + "\tchildren of DIR.\n";

    return info;
  }

}
