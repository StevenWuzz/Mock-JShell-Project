package commands;

import fileSystem.Directory;
import fileSystem.File;
import fileSystem.FileTree;
import inputOutput.Error;
import inputOutput.StandardOutput;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.LinkedList;

public class Search extends Command {


  private String searchFile(Directory dir, String name) {
    File f;
    int max = dir.getNumOfFileChildren();
    for (int i = 0; i < max; i++) {
      f = dir.getFileChildren().get(i);
      if (f.getName().equals(name)) {
        return PrintWorkingDirectory.printFullPath(f.getParent()) + f.getName();
      }
    }
    return "";
  }

  private String searchDir(Directory dir, String name) {
    Directory f;
    int max = dir.getNumOfDirectoryChildren();
    for (int i = 0; i < max; i++) {
      f = dir.getDirectoryChildren().get(i);
      if (f.getName().equals(name)) {
        return PrintWorkingDirectory.printFullPath(f);
      }
    }
    return "";
  }

  private String search(Directory dir, String name, boolean file) {
    String output;
    if (file) {
      output = searchFile(dir, name);
    } else {
      output = searchDir(dir, name);
    }
    int max = dir.getNumOfDirectoryChildren();
    for (int i = 0; i < max; i++) {
      if (!search(dir.getDirectoryChildren().get(i), name, file).equals("")) {
        output += "\n" + search(dir.getDirectoryChildren().get(i), name, file);
      }
    }
    return output;
  }


  @Override
  public String execute(String[] args) {
    boolean file = args[args.length - 3].equals("f");
    FileTree fileTree = FileTree.getFileTree();
    String name = args[args.length - 1];
    name = name.substring(1, name.length() - 1);
    String output = "";
    Directory dir;
    args = Arrays.copyOfRange(args, 1, args.length - 4);
    for (String path : args) {
      if (!Error.isValidPath(path)) {
        StandardOutput.perror(path + " is not a valid path");
        return output;
      }
      dir = (Directory) fileTree.traverseToEnd(path);
      if (dir == null) {
        StandardOutput.perror(path + " is not a directory");
        return output;
      }
      output += path + ":\n" + search(dir, name, file);
    }

    return output;
  }

  @Override
  public String toString() {
    return null;
  }
}
